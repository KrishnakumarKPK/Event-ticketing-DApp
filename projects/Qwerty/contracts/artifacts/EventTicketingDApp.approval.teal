#pragma version 10
intcblock 1 0 4 32
bytecblock 0x7469636b657441737365744964 0x6f7267616e697a6572 0x7469636b6574526573616c65436f756e74 0x7469636b65745072696365 0x726573616c654c696d6974

// This TEAL was generated by TEALScript v0.105.4
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createEvent(address,uint64,uint64,uint64)void
*abi_route_createEvent:
	// resaleLimit: uint64
	txna ApplicationArgs 4
	btoi

	// ticketPrice: uint64
	txna ApplicationArgs 3
	btoi

	// ticketAssetId: uint64
	txna ApplicationArgs 2
	btoi

	// organizer: address
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 32
	==

	// argument 3 (organizer) for createEvent must be a address
	assert

	// execute createEvent(address,uint64,uint64,uint64)void
	callsub createEvent
	intc 0 // 1
	return

// createEvent(organizer: Address, ticketAssetId: AssetID, ticketPrice: uint64, resaleLimit: uint64): void
createEvent:
	proto 4 0

	// contracts\Qwerty.algo.ts:11
	// this.organizer.value = organizer
	bytec 1 //  "organizer"
	frame_dig -1 // organizer: Address
	app_global_put

	// contracts\Qwerty.algo.ts:12
	// this.ticketAssetId.value = ticketAssetId
	bytec 0 //  "ticketAssetId"
	frame_dig -2 // ticketAssetId: AssetID
	app_global_put

	// contracts\Qwerty.algo.ts:13
	// this.ticketPrice.value = ticketPrice
	bytec 3 //  "ticketPrice"
	frame_dig -3 // ticketPrice: uint64
	app_global_put

	// contracts\Qwerty.algo.ts:14
	// this.resaleLimit.value = resaleLimit
	bytec 4 //  "resaleLimit"
	frame_dig -4 // resaleLimit: uint64
	app_global_put
	retsub

// optInToAsset(pay)void
*abi_route_optInToAsset:
	// mbrTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (mbrTxn) for optInToAsset must be a pay transaction
	assert

	// execute optInToAsset(pay)void
	callsub optInToAsset
	intc 0 // 1
	return

// optInToAsset(mbrTxn: PayTxn): void
optInToAsset:
	proto 1 0

	// contracts\Qwerty.algo.ts:18
	// assert(this.txn.sender === this.organizer.value)
	txn Sender
	bytec 1 //  "organizer"
	app_global_get
	==
	assert

	// contracts\Qwerty.algo.ts:19
	// assert(!this.app.address.isOptedInToAsset(this.ticketAssetId.value))
	global CurrentApplicationAddress
	bytec 0 //  "ticketAssetId"
	app_global_get
	asset_holding_get AssetBalance
	swap
	pop
	!
	assert

	// contracts\Qwerty.algo.ts:21
	// verifyPayTxn(mbrTxn, {
	//       receiver: this.app.address,
	//       amount: globals.minBalance + globals.assetOptInMinBalance,
	//     })
	// verify receiver
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Amount
	global MinBalance
	global AssetOptInMinBalance
	+
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"amount","expected":"globals.minBalance + globals.assetOptInMinBalance"}
	assert

	// contracts\Qwerty.algo.ts:26
	// sendAssetTransfer({
	//       xferAsset: this.ticketAssetId.value,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts\Qwerty.algo.ts:27
	// xferAsset: this.ticketAssetId.value
	bytec 0 //  "ticketAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts\Qwerty.algo.ts:28
	// assetAmount: 0
	intc 1 // 0
	itxn_field AssetAmount

	// contracts\Qwerty.algo.ts:29
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// buyTicket(pay,uint64)void
*abi_route_buyTicket:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// buyerTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 1 (buyerTxn) for buyTicket must be a pay transaction
	assert

	// execute buyTicket(pay,uint64)void
	callsub buyTicket
	intc 0 // 1
	return

// buyTicket(buyerTxn: PayTxn, quantity: uint64): void
buyTicket:
	proto 2 0

	// contracts\Qwerty.algo.ts:34
	// assert(quantity > 0)
	frame_dig -2 // quantity: uint64
	intc 1 // 0
	>
	assert

	// contracts\Qwerty.algo.ts:36
	// verifyPayTxn(buyerTxn, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: this.ticketPrice.value * quantity,
	//     })
	// verify sender
	frame_dig -1 // buyerTxn: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"buyerTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -1 // buyerTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"buyerTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // buyerTxn: PayTxn
	gtxns Amount
	bytec 3 //  "ticketPrice"
	app_global_get
	frame_dig -2 // quantity: uint64
	*
	==

	// transaction verification failed: {"txn":"buyerTxn","field":"amount","expected":"this.ticketPrice.value * quantity"}
	assert

	// contracts\Qwerty.algo.ts:42
	// sendAssetTransfer({
	//       xferAsset: this.ticketAssetId.value,
	//       assetAmount: quantity,
	//       assetReceiver: this.txn.sender,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts\Qwerty.algo.ts:43
	// xferAsset: this.ticketAssetId.value
	bytec 0 //  "ticketAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts\Qwerty.algo.ts:44
	// assetAmount: quantity
	frame_dig -2 // quantity: uint64
	itxn_field AssetAmount

	// contracts\Qwerty.algo.ts:45
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\Qwerty.algo.ts:49
	// this.ticketResaleCount(this.txn.sender).value = 0
	txn Sender
	bytec 2 //  "ticketResaleCount"
	intc 1 // 0
	app_local_put
	retsub

// transferTicket(uint64,address)void
*abi_route_transferTicket:
	// newOwner: address
	txna ApplicationArgs 2
	dup
	len
	intc 3 // 32
	==

	// argument 0 (newOwner) for transferTicket must be a address
	assert

	// ticketId: uint64
	txna ApplicationArgs 1
	btoi

	// execute transferTicket(uint64,address)void
	callsub transferTicket
	intc 0 // 1
	return

// transferTicket(ticketId: uint64, newOwner: Address): void
transferTicket:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	pushbytes 0x

	// contracts\Qwerty.algo.ts:53
	// resaleCount = this.ticketResaleCount(this.txn.sender).value
	txn Sender
	bytec 2 //  "ticketResaleCount"
	app_local_get
	frame_bury 0 // resaleCount: uint64

	// contracts\Qwerty.algo.ts:54
	// assert(resaleCount < this.resaleLimit.value, "Resale limit exceeded")
	frame_dig 0 // resaleCount: uint64
	bytec 4 //  "resaleLimit"
	app_global_get
	<

	// Resale limit exceeded
	assert

	// contracts\Qwerty.algo.ts:56
	// sendAssetTransfer({
	//       xferAsset: this.ticketAssetId.value,
	//       assetAmount: 1,
	//       assetReceiver: newOwner,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts\Qwerty.algo.ts:57
	// xferAsset: this.ticketAssetId.value
	bytec 0 //  "ticketAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts\Qwerty.algo.ts:58
	// assetAmount: 1
	intc 0 // 1
	itxn_field AssetAmount

	// contracts\Qwerty.algo.ts:59
	// assetReceiver: newOwner
	frame_dig -2 // newOwner: Address
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\Qwerty.algo.ts:62
	// this.ticketResaleCount(this.txn.sender).value = resaleCount + 1
	txn Sender
	bytec 2 //  "ticketResaleCount"
	frame_dig 0 // resaleCount: uint64
	intc 0 // 1
	+
	app_local_put
	retsub

// deleteEvent()void
*abi_route_deleteEvent:
	// execute deleteEvent()void
	callsub deleteEvent
	intc 0 // 1
	return

// deleteEvent(): void
deleteEvent:
	proto 0 0

	// contracts\Qwerty.algo.ts:66
	// assert(this.txn.sender === this.organizer.value)
	txn Sender
	bytec 1 //  "organizer"
	app_global_get
	==
	assert

	// contracts\Qwerty.algo.ts:68
	// sendAssetTransfer({
	//       xferAsset: this.ticketAssetId.value,
	//       assetReceiver: this.organizer.value,
	//       assetAmount: this.app.address.assetBalance(this.ticketAssetId.value),
	//       assetCloseTo: this.organizer.value,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts\Qwerty.algo.ts:69
	// xferAsset: this.ticketAssetId.value
	bytec 0 //  "ticketAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts\Qwerty.algo.ts:70
	// assetReceiver: this.organizer.value
	bytec 1 //  "organizer"
	app_global_get
	itxn_field AssetReceiver

	// contracts\Qwerty.algo.ts:71
	// assetAmount: this.app.address.assetBalance(this.ticketAssetId.value)
	global CurrentApplicationAddress
	bytec 0 //  "ticketAssetId"
	app_global_get
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts\Qwerty.algo.ts:72
	// assetCloseTo: this.organizer.value
	bytec 1 //  "organizer"
	app_global_get
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\Qwerty.algo.ts:75
	// sendPayment({
	//       receiver: this.organizer.value,
	//       amount: this.app.address.balance,
	//       closeRemainderTo: this.organizer.value,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\Qwerty.algo.ts:76
	// receiver: this.organizer.value
	bytec 1 //  "organizer"
	app_global_get
	itxn_field Receiver

	// contracts\Qwerty.algo.ts:77
	// amount: this.app.address.balance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	itxn_field Amount

	// contracts\Qwerty.algo.ts:78
	// closeRemainderTo: this.organizer.value
	bytec 1 //  "organizer"
	app_global_get
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x2439d7b2 // method "createEvent(address,uint64,uint64,uint64)void"
	pushbytes 0x37e84677 // method "optInToAsset(pay)void"
	pushbytes 0xc3f10a30 // method "buyTicket(pay,uint64)void"
	pushbytes 0xa95bffc8 // method "transferTicket(uint64,address)void"
	pushbytes 0xb7c71b59 // method "deleteEvent()void"
	txna ApplicationArgs 0
	match *abi_route_createEvent *abi_route_optInToAsset *abi_route_buyTicket *abi_route_transferTicket *abi_route_deleteEvent

	// this contract does not implement the given ABI method for call NoOp
	err