/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createEvent(address,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optInToAsset(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buyTicket(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferTicket(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteEvent()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "ticketResaleCount": {
          "type": "uint64",
          "key": "ticketResaleCount"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "organizer": {
          "type": "bytes",
          "key": "organizer"
        },
        "ticketAssetId": {
          "type": "uint64",
          "key": "ticketAssetId"
        },
        "ticketPrice": {
          "type": "uint64",
          "key": "ticketPrice"
        },
        "resaleLimit": {
          "type": "uint64",
          "key": "resaleLimit"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 1
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "EventTicketingDApp",
    "desc": "",
    "methods": [
      {
        "name": "createEvent",
        "args": [
          {
            "name": "organizer",
            "type": "address"
          },
          {
            "name": "ticketAssetId",
            "type": "uint64"
          },
          {
            "name": "ticketPrice",
            "type": "uint64"
          },
          {
            "name": "resaleLimit",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToAsset",
        "args": [
          {
            "name": "mbrTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "buyTicket",
        "args": [
          {
            "name": "buyerTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transferTicket",
        "args": [
          {
            "name": "ticketId",
            "type": "uint64"
          },
          {
            "name": "newOwner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteEvent",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the EventTicketingDApp smart contract.
 */
export type EventTicketingDApp = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createEvent(address,uint64,uint64,uint64)void' | 'createEvent', {
      argsObj: {
        organizer: string
        ticketAssetId: bigint | number
        ticketPrice: bigint | number
        resaleLimit: bigint | number
      }
      argsTuple: [organizer: string, ticketAssetId: bigint | number, ticketPrice: bigint | number, resaleLimit: bigint | number]
      returns: void
    }>
    & Record<'optInToAsset(pay)void' | 'optInToAsset', {
      argsObj: {
        mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'buyTicket(pay,uint64)void' | 'buyTicket', {
      argsObj: {
        buyerTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [buyerTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'transferTicket(uint64,address)void' | 'transferTicket', {
      argsObj: {
        ticketId: bigint | number
        newOwner: string
      }
      argsTuple: [ticketId: bigint | number, newOwner: string]
      returns: void
    }>
    & Record<'deleteEvent()void' | 'deleteEvent', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'organizer'?: BinaryState
      'ticketAssetId'?: IntegerState
      'ticketPrice'?: IntegerState
      'resaleLimit'?: IntegerState
    }
    local: {
      'ticketResaleCount'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type EventTicketingDAppSig = keyof EventTicketingDApp['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends EventTicketingDAppSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the EventTicketingDApp smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends EventTicketingDAppSig> = EventTicketingDApp['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the EventTicketingDApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EventTicketingDAppSig> = EventTicketingDApp['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type EventTicketingDAppCreateCalls = (typeof EventTicketingDAppCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type EventTicketingDAppCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type EventTicketingDAppDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: EventTicketingDAppCreateCalls) => EventTicketingDAppCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class EventTicketingDAppCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the EventTicketingDApp smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createEvent(address,uint64,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createEvent(args: MethodArgs<'createEvent(address,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createEvent(address,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.organizer, args.ticketAssetId, args.ticketPrice, args.resaleLimit],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the optInToAsset(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optInToAsset(args: MethodArgs<'optInToAsset(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optInToAsset(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the buyTicket(pay,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static buyTicket(args: MethodArgs<'buyTicket(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'buyTicket(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.buyerTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transferTicket(uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferTicket(args: MethodArgs<'transferTicket(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transferTicket(uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.ticketId, args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteEvent()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteEvent(args: MethodArgs<'deleteEvent()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteEvent()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the EventTicketingDApp smart contract
 */
export class EventTicketingDAppClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `EventTicketingDAppClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof EventTicketingDApp['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the EventTicketingDApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: EventTicketingDAppDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(EventTicketingDAppCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the EventTicketingDApp smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(EventTicketingDAppCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the EventTicketingDApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the createEvent(address,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createEvent(args: MethodArgs<'createEvent(address,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EventTicketingDAppCallFactory.createEvent(args, params))
  }

  /**
   * Calls the optInToAsset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optInToAsset(args: MethodArgs<'optInToAsset(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EventTicketingDAppCallFactory.optInToAsset(args, params))
  }

  /**
   * Calls the buyTicket(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public buyTicket(args: MethodArgs<'buyTicket(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EventTicketingDAppCallFactory.buyTicket(args, params))
  }

  /**
   * Calls the transferTicket(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferTicket(args: MethodArgs<'transferTicket(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EventTicketingDAppCallFactory.transferTicket(args, params))
  }

  /**
   * Calls the deleteEvent()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteEvent(args: MethodArgs<'deleteEvent()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EventTicketingDAppCallFactory.deleteEvent(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<EventTicketingDApp['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get organizer() {
        return EventTicketingDAppClient.getBinaryState(state, 'organizer')
      },
      get ticketAssetId() {
        return EventTicketingDAppClient.getIntegerState(state, 'ticketAssetId')
      },
      get ticketPrice() {
        return EventTicketingDAppClient.getIntegerState(state, 'ticketPrice')
      },
      get resaleLimit() {
        return EventTicketingDAppClient.getIntegerState(state, 'resaleLimit')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<EventTicketingDApp['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get ticketResaleCount() {
        return EventTicketingDAppClient.getIntegerState(state, 'ticketResaleCount')
      },
    }
  }

  public compose(): EventTicketingDAppComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createEvent(args: MethodArgs<'createEvent(address,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createEvent(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optInToAsset(args: MethodArgs<'optInToAsset(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optInToAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      buyTicket(args: MethodArgs<'buyTicket(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.buyTicket(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferTicket(args: MethodArgs<'transferTicket(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferTicket(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteEvent(args: MethodArgs<'deleteEvent()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteEvent(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as EventTicketingDAppComposer
  }
}
export type EventTicketingDAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createEvent(address,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createEvent(args: MethodArgs<'createEvent(address,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EventTicketingDAppComposer<[...TReturns, MethodReturn<'createEvent(address,uint64,uint64,uint64)void'>]>

  /**
   * Calls the optInToAsset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(args: MethodArgs<'optInToAsset(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EventTicketingDAppComposer<[...TReturns, MethodReturn<'optInToAsset(pay)void'>]>

  /**
   * Calls the buyTicket(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyTicket(args: MethodArgs<'buyTicket(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EventTicketingDAppComposer<[...TReturns, MethodReturn<'buyTicket(pay,uint64)void'>]>

  /**
   * Calls the transferTicket(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferTicket(args: MethodArgs<'transferTicket(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EventTicketingDAppComposer<[...TReturns, MethodReturn<'transferTicket(uint64,address)void'>]>

  /**
   * Calls the deleteEvent()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteEvent(args: MethodArgs<'deleteEvent()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EventTicketingDAppComposer<[...TReturns, MethodReturn<'deleteEvent()void'>]>

  /**
   * Makes a clear_state call to an existing instance of the EventTicketingDApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): EventTicketingDAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): EventTicketingDAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<EventTicketingDAppComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<EventTicketingDAppComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type EventTicketingDAppComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type EventTicketingDAppComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
